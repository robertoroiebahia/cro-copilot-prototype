-- Migration: Multi-Workspace Architecture
-- Date: 2025-10-20
-- Description: Refactor to support multiple workspaces (clients/properties) per user
-- This enables agency/consultant use cases where one account manages multiple clients

-- ============================================================================
-- WORKSPACES TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS public.workspaces (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,

  -- Workspace basics
  name TEXT NOT NULL,
  description TEXT,
  website_url TEXT,

  -- GA4 Configuration (moved from profiles)
  ga4_property_id TEXT,
  ga4_refresh_token TEXT, -- Encrypted at application level
  ga4_last_sync_at TIMESTAMPTZ,
  ga4_sync_enabled BOOLEAN DEFAULT false,

  -- Settings
  timezone TEXT DEFAULT 'UTC',
  currency TEXT DEFAULT 'USD',

  -- Metadata
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_workspaces_user_id ON public.workspaces(user_id);
CREATE INDEX IF NOT EXISTS idx_workspaces_active ON public.workspaces(is_active) WHERE is_active = true;

-- Enable RLS
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their own workspaces"
  ON public.workspaces
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own workspaces"
  ON public.workspaces
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own workspaces"
  ON public.workspaces
  FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own workspaces"
  ON public.workspaces
  FOR DELETE
  USING (auth.uid() = user_id);

-- Updated_at trigger
CREATE OR REPLACE FUNCTION update_workspaces_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER workspaces_updated_at
  BEFORE UPDATE ON public.workspaces
  FOR EACH ROW
  EXECUTE FUNCTION update_workspaces_updated_at();

-- ============================================================================
-- MIGRATE GA4 TABLES TO USE WORKSPACE_ID
-- ============================================================================

-- Add workspace_id to ga4_raw_events
ALTER TABLE public.ga4_raw_events
ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

-- Create index
CREATE INDEX IF NOT EXISTS idx_ga4_raw_events_workspace_id ON public.ga4_raw_events(workspace_id);

-- Update RLS policies for ga4_raw_events
DROP POLICY IF EXISTS "Users can view their own GA4 events" ON public.ga4_raw_events;
DROP POLICY IF EXISTS "Users can insert their own GA4 events" ON public.ga4_raw_events;
DROP POLICY IF EXISTS "Users can update their own GA4 events" ON public.ga4_raw_events;
DROP POLICY IF EXISTS "Users can delete their own GA4 events" ON public.ga4_raw_events;

CREATE POLICY "Users can view their workspace GA4 events"
  ON public.ga4_raw_events
  FOR SELECT
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert their workspace GA4 events"
  ON public.ga4_raw_events
  FOR INSERT
  WITH CHECK (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their workspace GA4 events"
  ON public.ga4_raw_events
  FOR UPDATE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their workspace GA4 events"
  ON public.ga4_raw_events
  FOR DELETE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

-- Add workspace_id to ga4_calculated_funnels
ALTER TABLE public.ga4_calculated_funnels
ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS idx_ga4_funnels_workspace_id ON public.ga4_calculated_funnels(workspace_id);

-- Update unique index to include workspace_id
DROP INDEX IF EXISTS idx_ga4_funnels_unique;
CREATE UNIQUE INDEX idx_ga4_funnels_unique ON public.ga4_calculated_funnels(
  workspace_id, segment_type, start_date, end_date
);

-- Update RLS policies for ga4_calculated_funnels
DROP POLICY IF EXISTS "Users can view their own funnels" ON public.ga4_calculated_funnels;
DROP POLICY IF EXISTS "Users can insert their own funnels" ON public.ga4_calculated_funnels;
DROP POLICY IF EXISTS "Users can update their own funnels" ON public.ga4_calculated_funnels;
DROP POLICY IF EXISTS "Users can delete their own funnels" ON public.ga4_calculated_funnels;

CREATE POLICY "Users can view their workspace funnels"
  ON public.ga4_calculated_funnels
  FOR SELECT
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert their workspace funnels"
  ON public.ga4_calculated_funnels
  FOR INSERT
  WITH CHECK (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their workspace funnels"
  ON public.ga4_calculated_funnels
  FOR UPDATE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their workspace funnels"
  ON public.ga4_calculated_funnels
  FOR DELETE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

-- Add workspace_id to ga4_funnel_insights
ALTER TABLE public.ga4_funnel_insights
ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS idx_ga4_insights_workspace_id ON public.ga4_funnel_insights(workspace_id);

-- Update RLS policies for ga4_funnel_insights
DROP POLICY IF EXISTS "Users can view their own funnel insights" ON public.ga4_funnel_insights;
DROP POLICY IF EXISTS "Users can insert their own funnel insights" ON public.ga4_funnel_insights;
DROP POLICY IF EXISTS "Users can update their own funnel insights" ON public.ga4_funnel_insights;
DROP POLICY IF EXISTS "Users can delete their own funnel insights" ON public.ga4_funnel_insights;

CREATE POLICY "Users can view their workspace funnel insights"
  ON public.ga4_funnel_insights
  FOR SELECT
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert their workspace funnel insights"
  ON public.ga4_funnel_insights
  FOR INSERT
  WITH CHECK (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their workspace funnel insights"
  ON public.ga4_funnel_insights
  FOR UPDATE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their workspace funnel insights"
  ON public.ga4_funnel_insights
  FOR DELETE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

-- ============================================================================
-- MIGRATE ANALYSES TABLE TO USE WORKSPACE_ID
-- ============================================================================

ALTER TABLE public.analyses
ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS idx_analyses_workspace_id ON public.analyses(workspace_id);

-- Update RLS policies for analyses
DROP POLICY IF EXISTS "Users can view their own analyses" ON public.analyses;
DROP POLICY IF EXISTS "Users can create analyses" ON public.analyses;
DROP POLICY IF EXISTS "Users can update their own analyses" ON public.analyses;
DROP POLICY IF EXISTS "Users can delete their own analyses" ON public.analyses;

CREATE POLICY "Users can view their workspace analyses"
  ON public.analyses
  FOR SELECT
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create workspace analyses"
  ON public.analyses
  FOR INSERT
  WITH CHECK (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their workspace analyses"
  ON public.analyses
  FOR UPDATE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their workspace analyses"
  ON public.analyses
  FOR DELETE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

-- ============================================================================
-- MIGRATE INSIGHTS TABLE TO USE WORKSPACE_ID
-- ============================================================================

ALTER TABLE public.insights
ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS idx_insights_workspace_id ON public.insights(workspace_id);

-- Update RLS policies for insights
DROP POLICY IF EXISTS "Users can view their own insights" ON public.insights;
DROP POLICY IF EXISTS "Users can create insights" ON public.insights;
DROP POLICY IF EXISTS "Users can update their own insights" ON public.insights;
DROP POLICY IF EXISTS "Users can delete their own insights" ON public.insights;

CREATE POLICY "Users can view their workspace insights"
  ON public.insights
  FOR SELECT
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create workspace insights"
  ON public.insights
  FOR INSERT
  WITH CHECK (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their workspace insights"
  ON public.insights
  FOR UPDATE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their workspace insights"
  ON public.insights
  FOR DELETE
  USING (
    workspace_id IN (
      SELECT id FROM public.workspaces WHERE user_id = auth.uid()
    )
  );

-- ============================================================================
-- MIGRATE THEMES TABLE TO USE WORKSPACE_ID (if exists)
-- ============================================================================

DO $$
BEGIN
  IF EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'themes') THEN
    -- Add workspace_id
    ALTER TABLE public.themes
    ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

    CREATE INDEX IF NOT EXISTS idx_themes_workspace_id ON public.themes(workspace_id);

    -- Update RLS policies
    DROP POLICY IF EXISTS "Users can view their own themes" ON public.themes;
    DROP POLICY IF EXISTS "Users can create themes" ON public.themes;
    DROP POLICY IF EXISTS "Users can update their own themes" ON public.themes;
    DROP POLICY IF EXISTS "Users can delete their own themes" ON public.themes;

    CREATE POLICY "Users can view their workspace themes"
      ON public.themes
      FOR SELECT
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can create workspace themes"
      ON public.themes
      FOR INSERT
      WITH CHECK (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can update their workspace themes"
      ON public.themes
      FOR UPDATE
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can delete their workspace themes"
      ON public.themes
      FOR DELETE
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );
  END IF;
END $$;

-- ============================================================================
-- MIGRATE EXPERIMENTS TABLE TO USE WORKSPACE_ID (if exists)
-- ============================================================================

DO $$
BEGIN
  IF EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'experiments') THEN
    -- Add workspace_id
    ALTER TABLE public.experiments
    ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

    CREATE INDEX IF NOT EXISTS idx_experiments_workspace_id ON public.experiments(workspace_id);

    -- Update RLS policies
    DROP POLICY IF EXISTS "Users can view their own experiments" ON public.experiments;
    DROP POLICY IF EXISTS "Users can create experiments" ON public.experiments;
    DROP POLICY IF EXISTS "Users can update their own experiments" ON public.experiments;
    DROP POLICY IF EXISTS "Users can delete their own experiments" ON public.experiments;

    CREATE POLICY "Users can view their workspace experiments"
      ON public.experiments
      FOR SELECT
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can create workspace experiments"
      ON public.experiments
      FOR INSERT
      WITH CHECK (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can update their workspace experiments"
      ON public.experiments
      FOR UPDATE
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can delete their workspace experiments"
      ON public.experiments
      FOR DELETE
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );
  END IF;
END $$;

-- ============================================================================
-- MIGRATE HYPOTHESES TABLE TO USE WORKSPACE_ID (if exists)
-- ============================================================================

DO $$
BEGIN
  IF EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'hypotheses') THEN
    -- Add workspace_id
    ALTER TABLE public.hypotheses
    ADD COLUMN IF NOT EXISTS workspace_id UUID REFERENCES public.workspaces(id) ON DELETE CASCADE;

    CREATE INDEX IF NOT EXISTS idx_hypotheses_workspace_id ON public.hypotheses(workspace_id);

    -- Update RLS policies
    DROP POLICY IF EXISTS "Users can view their own hypotheses" ON public.hypotheses;
    DROP POLICY IF EXISTS "Users can create hypotheses" ON public.hypotheses;
    DROP POLICY IF EXISTS "Users can update their own hypotheses" ON public.hypotheses;
    DROP POLICY IF EXISTS "Users can delete their own hypotheses" ON public.hypotheses;

    CREATE POLICY "Users can view their workspace hypotheses"
      ON public.hypotheses
      FOR SELECT
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can create workspace hypotheses"
      ON public.hypotheses
      FOR INSERT
      WITH CHECK (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can update their workspace hypotheses"
      ON public.hypotheses
      FOR UPDATE
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );

    CREATE POLICY "Users can delete their workspace hypotheses"
      ON public.hypotheses
      FOR DELETE
      USING (
        workspace_id IN (
          SELECT id FROM public.workspaces WHERE user_id = auth.uid()
        )
      );
  END IF;
END $$;

-- ============================================================================
-- COMMENTS
-- ============================================================================

COMMENT ON TABLE public.workspaces IS 'Workspaces (clients/properties) managed by users. Each workspace represents a separate client or GA4 property.';
COMMENT ON COLUMN public.workspaces.ga4_property_id IS 'GA4 Property ID for this workspace';
COMMENT ON COLUMN public.workspaces.ga4_refresh_token IS 'Encrypted Google OAuth refresh token for GA4 access';
COMMENT ON COLUMN public.workspaces.is_active IS 'Whether this workspace is active (for soft deletes)';
